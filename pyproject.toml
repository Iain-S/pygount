[tool.pytest.ini_options]
minversion = "7.2"
addopts = [
    "-rA"
]
testpaths = [
    "tests",
]

[tool.poetry]
name = "pygount"
version = "1.8.1"
description = "count source lines of code (SLOC) using pygments"
readme = "README.md"
authors = ["Thomas Aglassinger <roskakori@users.sourceforge.net>"]
license = "BSD"
homepage = "https://github.com/roskakori/pygount"
repository = "https://github.com/roskakori/pygount.git"
documentation = "https://pygount.readthedocs.io"
keywords = ["code analysis", "count", "SLOC"]
classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Environment :: Console",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License",
        "Natural Language :: English",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Topic :: Software Development",
]
packages = [
    { include = "pygount" },
]

[tool.poetry.dependencies]
python = ">=3.9, <3.13"  # NOTE We cannot use <4 because of coveralls.
pygments = "^2"
chardet = "^5"
rich = ">=9, <14"
gitpython = "^3"

[tool.poetry.group.dev.dependencies]
coveralls = "^4"
coverage = "^7"
pytest = "^8"
pytest-cov = "^5"
pre-commit = "^3.5"  # TODO#158: Change to "^3".
pur = "^7"
ruff = "^0.5.1"
twine = "^5"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^7"

[tool.poetry.scripts]
pygount = "pygount.command:main"

[tool.poetry.urls]
"Issue Tracker" = "https://github.com/roskakori/pygount/issues"
"Changes" = "https://pygount.readthedocs.io/en/latest/changes.html"

[tool.ruff]
exclude = [
    ".eggs",
    ".git",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "htmlcov",
]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
ignore = [
    # Missing trailing comma → May cause conflicts when used with the formatter.
    "COM812",
    # Too many branches
    "PLR0912",
    # Too many arguments in function definition
    "PLR0913",
    # Too many statements
    "PLR0915",
    # Magic value used in comparison
    "PLR2004",
    # TODO#89 Enable checks for usage of pathlib.
    "PTH100",
    "PTH103",
    "PTH107",
    "PTH109",
    "PTH110",
    "PTH112",
    "PTH114",
    "PTH118",
    "PTH119",
    "PTH120",
    "PTH122",
    "PTH123",
    "PTH202",
    "PTH207",
    # Unneccesarry assign → We regularly use `result = ...; return result` to examine the result in the debugger.
    "RET504",
    # TODO#506 Enable RUF012 check for mutable class attributes.
    # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF012",
    # Avoid specifying long messages outside the exception class
    "TRY003",
    # Abstract `raise` to an inner function
    "TRY301",
]
select = [
    # flake8-builtins
    "A",
    # flake8-bugbear
    "B",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-django
    "DJ",
    # flake8-datetimez
    "DTZ",
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # isort
    "I",
    # flake8-no-pep420
    "INP",
    #  flake8-gettext
    "INT",
    # flake8-logging
    "LOG",
    # perflint
    "PERF",
    # pygrep-hooks
    "PGH",
    # flake8-pie
    "PIE",
    # pylint
    "PL",
    # flake8-use-pathlib
    "PTH",
    # refactor
    "R",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # ruff specific rules
    "RUF",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # tryceratops
    "TRY",
    # flake8-debugger
    "T10",
    # flake8-print
    "T20",
    # pyupgrade
    "UP",
]

[tool.ruff.lint.isort]
known-first-party = ["pygount", "scripts", "tests"]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = ["INP001"]

[build-system]
requires = ["poetry-core>=1.8.1"]
build-backend = "poetry.core.masonry.api"
